from pyrogram import Client, filters
from pyrogram.types import Message
import os
import asyncio
from pyrogram.errors import FloodWait

bot = Client(
    "Countdown-TeLeTiPs",
    api_id=int(os.environ["API_ID"]),
    api_hash=os.environ["API_HASH"],
    bot_token=os.environ["BOT_TOKEN"]
)

footer_message = os.environ.get("FOOTER_MESSAGE", "–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ –±–æ—Ç–∞.")
stoptimer = False


@bot.on_channel_post(filters.regex(r'^/set \d+ ".*"$'))
async def set_timer_channel(client, message: Message):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —É –∫–∞–Ω–∞–ª—ñ.
    """
    global stoptimer
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏
        command_parts = message.text.split(" ", 2)
        if len(command_parts) < 3:
            return await client.send_message(
                message.chat.id,
                '‚ùå **–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.**\n\n‚úÖ –§–æ—Ä–º–∞—Ç:\n<code>/set —Å–µ–∫—É–Ω–¥–∏ "–ø–æ–¥—ñ—è"</code>\n\n**–ü—Ä–∏–∫–ª–∞–¥**:\n<code>/set 10 "–¢–∞–π–º–µ—Ä –Ω–∞ 10 —Å–µ–∫—É–Ω–¥"</code>'
            )

        user_input_time = int(command_parts[1])
        user_input_event = command_parts[2].strip('"')

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ª—ñ–∫—É
        sent_message = await client.send_message(message.chat.id, f"‚è≥ –¢–∞–π–º–µ—Ä: {user_input_event}")

        stoptimer = False

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç–∞–π–º–µ—Ä–∞
        while user_input_time > 0 and not stoptimer:
            d, h, m, s = (
                user_input_time // (3600 * 24),
                user_input_time % (3600 * 24) // 3600,
                user_input_time % 3600 // 60,
                user_input_time % 60,
            )
            countdown_text = f'{user_input_event}\n\n‚è≥ {d}**–¥** {h:02d}**–≥** {m:02d}**—Ö–≤** {s:02d}**—Å**\n\n<i>{footer_message}</i>'
            await sent_message.edit_text(countdown_text)
            await asyncio.sleep(3 if user_input_time > 10 else 1)
            user_input_time -= 3 if user_input_time > 10 else 1

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
        if not stoptimer:
            await sent_message.edit_text("üö® Beep! Beep!! **–ß–∞—Å –≤–∏–π—à–æ–≤!!!**")
        else:
            await sent_message.edit_text("üõë –í—ñ–¥–ª—ñ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except FloodWait as e:
        await asyncio.sleep(e.value)
    except Exception as e:
        await client.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.on_channel_post(filters.regex(r'^/stopc$'))
async def stop_timer_channel(client, message: Message):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —É –∫–∞–Ω–∞–ª—ñ.
    """
    global stoptimer
    try:
        stoptimer = True
        await client.send_message(message.chat.id, "üõë –í—ñ–¥–ª—ñ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except FloodWait as e:
        await asyncio.sleep(e.value)
    except Exception as e:
        await client.send_message(message.chat.id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.on_message(filters.command("set", prefixes="/") & filters.private)
async def set_timer_private(client, message: Message):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.
    """
    global stoptimer
    try:
        command_parts = message.text.split(" ", 2)
        if len(command_parts) < 3:
            return await message.reply(
                '‚ùå **–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.**\n\n‚úÖ –§–æ—Ä–º–∞—Ç:\n<code>/set —Å–µ–∫—É–Ω–¥–∏ "–ø–æ–¥—ñ—è"</code>\n\n**–ü—Ä–∏–∫–ª–∞–¥**:\n<code>/set 10 "–¢–∞–π–º–µ—Ä –Ω–∞ 10 —Å–µ–∫—É–Ω–¥"</code>'
            )

        user_input_time = int(command_parts[1])
        user_input_event = command_parts[2].strip('"')

        sent_message = await message.reply(f"‚è≥ –¢–∞–π–º–µ—Ä: {user_input_event}")

        stoptimer = False

        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ç–∞–π–º–µ—Ä–∞
        while user_input_time > 0 and not stoptimer:
            d, h, m, s = (
                user_input_time // (3600 * 24),
                user_input_time % (3600 * 24) // 3600,
                user_input_time % 3600 // 60,
                user_input_time % 60,
            )
            countdown_text = f'{user_input_event}\n\n‚è≥ {d}**–¥** {h:02d}**–≥** {m:02d}**—Ö–≤** {s:02d}**—Å**\n\n<i>{footer_message}</i>'
            await sent_message.edit_text(countdown_text)
            await asyncio.sleep(3 if user_input_time > 10 else 1)
            user_input_time -= 3 if user_input_time > 10 else 1

        if not stoptimer:
            await sent_message.edit_text("üö® Beep! Beep!! **–ß–∞—Å –≤–∏–π—à–æ–≤!!!**")
        else:
            await sent_message.edit_text("üõë –í—ñ–¥–ª—ñ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except FloodWait as e:
        await asyncio.sleep(e.value)
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.on_message(filters.command("stopc", prefixes="/") & filters.private)
async def stop_timer_private(client, message: Message):
    """
    –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.
    """
    global stoptimer
    try:
        stoptimer = True
        await message.reply("üõë –í—ñ–¥–ª—ñ–∫ –∑—É–ø–∏–Ω–µ–Ω–æ.")
    except FloodWait as e:
        await asyncio.sleep(e.value)


print("Countdown Timer Bot is running!")
bot.run()
